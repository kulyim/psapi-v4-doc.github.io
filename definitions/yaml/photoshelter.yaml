openapi: 3.0.0
info:
  title: PhotoShelter API v4
  description: '# PhotoShelter API v4 definition'
  termsOfService: https://www.photoshelter.com/support/terms/
  contact:
    name: PhotoShelter API Support Team
    url: https://support.photoshelter.com
    email: api-support@photoshelter.com
  license:
    name: PhotoShelter License
    url: https://www.photoshelter.com/support/license
  version: Allan
servers:
- url: https://virtserver.swaggerhub.com/PhotoShelter/PhotoShelter/4
  description: PhotoShelter Auto Mocking API
tags:
- name: PhotoShelter API
paths:
  /collections/{collection_id}:
    get:
      tags:
      - Collection
      summary: GET /collections/{collection_id}.
      description: Get a collection by ID.
      operationId: collectionsGetId
      parameters:
      - name: collection_id
        in: path
        description: Collection ID to get
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CollectionId'
        example: C0000EXAMPLECOLL
      responses:
        200:
          description: /collections/{collection_id} - HTTP 200 OK Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        400:
          description: 400 Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ThisShouldBeARealId
                  status: "400"
                  title: Bad Request / Syntax
                  detail: Bad Request
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        404:
          description: 404 Not Found Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ResourceNotFoundException
                  status: "404"
                  title: Resource not found
                  detail: The requested resource was not found.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    CollectionId:
      maxLength: 16
      minLength: 16
      pattern: ^C0000[a-zA-Z0-9._]{11}$
      type: string
      description: The Collection ID
      example: C0000EXAMPLECOLL
    Collection:
      required:
      - attributes
      - id
      - type
      type: object
      properties:
        id:
          pattern: ^C0000[a-zA-Z0-9._]{11}$
          type: string
          description: Collection Id
          example: C0000EXAMPLECOLL
        type:
          type: string
          description: Type
        attributes:
          $ref: '#/components/schemas/Collection_attributes'
    MetaTag:
      type: object
      properties:
        copyright:
          type: string
          example: PhotoShelter 2019
        version:
          type: string
          example: 2019-05-01
        rate_limit:
          $ref: '#/components/schemas/MetaTag_rate_limit'
    Error:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error_errors'
      description: This object generates errors in compliance with RFC 7807 API Problem
    inline_response_200:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/MetaTag'
      example: '{"data":{"type":"collection","id":"C0000EXAMPLECOLL","attributes":{"name":"Example
        Name","description":"Example Description","display_order":1,"access_id":"A0000EXAMPLE_ACS","is_listed":true,"created_at":"2019-04-09T18:34:40-04:00","modified_at":"2019-04-09T18:34:40-04:00"},"links":{"self":"example.photoshelter.com/collections/C0000EXAMPLECOLL"}},"meta":{"copyright":"PhotoShelter
        2019","version":"2019-05-01","rate_limit":{"limit":10,"current":1,"expires":40}}}'
    inline_response_200_1:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/MetaTag'
    Collection_attributes:
      required:
      - access_id
      - created_at
      - description
      - display_order
      - is_listed
      - key_image_id
      - modified_at
      - name
      - name_url
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: Name of the collection
          example: My Trip to DR
        name_url:
          maxLength: 100
          type: string
          description: URL to the gallery
          nullable: true
        description:
          type: string
          description: Description of the colletion
          example: My Trip to DR Collection
        display_order:
          type: integer
          description: Display order
          example: 1
        key_image_id:
          pattern: ^GI000[a-zA-Z0-9._]{11}$
          type: string
          description: Key Image ID
          example: GI000EXAMPLE_IMG
        access_id:
          pattern: ^A0000[a-zA-Z0-9._]{11}$
          type: string
          description: Access ID
          example: A0000EXAMPLE_ACS
        is_listed:
          type: boolean
          description: Is listed on public site
          example: false
        created_at:
          type: string
          description: Creation date
          example: 2019-04-25T14:54:12.136828
        modified_at:
          type: string
          description: Modified Date
          example: 2019-04-25T14:54:12.136828
    MetaTag_rate_limit:
      type: object
      properties:
        limit:
          type: integer
          example: 10
        current:
          type: integer
          example: 1
        expires:
          type: integer
          example: 40
    Error_links:
      type: object
      properties:
        about:
          type: string
          example: http://api.developer.com/404.html
    Error_errors:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this occurrence of the problem
        links:
          $ref: '#/components/schemas/Error_links'
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: string
          description: The HTTP status code set by the origin server for this occurrence
            of the problem.
        detail:
          type: string
          description: An human readable explanation specific to this occurrence of
            the problem.
