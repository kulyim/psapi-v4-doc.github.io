openapi: 3.0.0
info:
  title: PhotoShelter API v4
  description: '# PhotoShelter API v4 definition'
  termsOfService: https://www.photoshelter.com/support/terms/
  contact:
    name: PhotoShelter API Support Team
    url: https://support.photoshelter.com
    email: api-support@photoshelter.com
  license:
    name: PhotoShelter License
    url: https://www.photoshelter.com/support/license
  version: Allan
servers:
- url: https://virtserver.swaggerhub.com/PhotoShelter/PhotoShelter/4
  description: PhotoShelter Auto Mocking API
tags:
- name: PhotoShelter API
paths:
  /galleries/{gallery_id}:
    get:
      tags:
      - Gallery
      summary: GET /galleries/{gallery_id}.
      description: Get a gallery by ID.
      operationId: galleriesGetId
      parameters:
      - name: gallery_id
        in: path
        description: The ID of the gallery
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/GalleryId'
        example: G0000EXAMPLEGALL
      responses:
        200:
          description: |
            /galleries/{gallery_id} - HTTP 200 OK Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
              example:
                data:
                  type: gallery
                  id: G0000EXAMPLE_GAL
                  attributes:
                    name: Example Name
                    description: Example Description
                    display_order: 10
                    key_image_id: GI000EXAMPLE_IMG
                    access_id: A0000EXAMPLE_ACS
                    is_listed: false
                    is_orig_enabled: false
                    is_watermark_disabled: false
                    created_at: 2019-04-09T18:34:40-04:00
                    modified_at: 2019-09-06T16:24:24-04:00
                  links:
                    self: example.photoshelter.com/galleries/G0000EXAMPLE_GAL
                meta:
                  copyright: PhotoShelter 2019
                  version: 2019-05-01
                  rate_limit_limit: 10
                  rate_limit_current: 1
                  rate_limit_expires: 40
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          links:
            GetGallery:
              operationId: galleryGetId
              parameters:
                gallery_id: $response.body#/data/id
              description: Links to self
        400:
          description: 400 Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ThisShouldBeARealId
                  status: "400"
                  title: Bad Request / Syntax
                  detail: Bad Request
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: 401 Unauthorized Client Error
          headers:
            WWW-Authenticate:
              description: The HTTP WWW-Authenticate response header defines the authentication
                method that should be used to gain access to a resource.
              style: simple
              explode: false
              schema:
                type: string
              example: 'WWW-Authenticate: Bearer'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: AcsPermissionException
                  status: "401"
                  title: 'Invalid access to resource: Gallery'
                  detail: You are not authorized to view this resource.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        404:
          description: 404 Not Found Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ResourceNotFoundException
                  status: "404"
                  title: Resource not found
                  detail: The requested resource was not found.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /collections/{collection_id}:
    get:
      tags:
      - Collection
      summary: GET /collections/{collection_id}.
      description: Get a collection by ID.
      operationId: collectionsGetId
      parameters:
      - name: collection_id
        in: path
        description: Collection ID to get
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CollectionId'
        example: C0000EXAMPLECOLL
      responses:
        200:
          description: /collections/{collection_id} - HTTP 200 OK Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        400:
          description: 400 Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ThisShouldBeARealId
                  status: "400"
                  title: Bad Request / Syntax
                  detail: Bad Request
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        404:
          description: 404 Not Found Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ResourceNotFoundException
                  status: "404"
                  title: Resource not found
                  detail: The requested resource was not found.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /collections/{collection_id}/link:
    get:
      tags:
      - Collection
      summary: GET /collections/{collection_id}/link.
      description: Get a collection's link
      operationId: collectionsGetIdLink
      parameters:
      - name: collection_id
        in: path
        description: Collection ID to retrieve a link from
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CollectionId'
        example: C0000EXAMPLECOLL
      responses:
        200:
          description: Custom Link Response - HTTP 200 OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        400:
          description: 400 Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ThisShouldBeARealId
                  status: "400"
                  title: Bad Request / Syntax
                  detail: Bad Request
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        404:
          description: 404 Not Found Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ResourceNotFoundException
                  status: "404"
                  title: Resource not found
                  detail: The requested resource was not found.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /collections:
    get:
      tags:
      - Collection
      summary: GET /collections.
      description: Query the collections
      operationId: collectionsGet
      parameters:
      - name: collection_id
        in: query
        description: Collection ID to match in the query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/CollectionId'
        example: C0000EXAMPLECOLL
      - name: name
        in: query
        description: Collection name to match in the query
        required: false
        style: form
        explode: true
        schema:
          maxLength: 100
          type: string
        example: EXAMPLE NAME
      - name: parent
        in: query
        description: Limit collections to children of the provided collection ID.
          Pass blank to find collections with no parent.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/CollectionId'
        example: C0000EXAMPLECOLL
      - name: match
        in: query
        description: Flag denoting partial or complete collection name matching. False
          for partial, true for complete.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
        example: true
      - name: per_page
        in: query
        description: Results per page
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 50
        example: 50
      - name: page
        in: query
        description: Page number
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1
      responses:
        200:
          description: |
            /collections - HTTP 200 OK Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_4'
            application/xml:
              schema:
                $ref: '#/components/schemas/inline_response_200_5'
        400:
          description: 400 Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: ThisShouldBeARealId
                  status: "400"
                  title: Bad Request / Syntax
                  detail: Bad Request
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
  /media:
    get:
      tags:
      - Media
      summary: GET /media.
      description: 'Media GET (aka media search). At least one of the following is
        required in order for the search to take place: (terms, custom_metadata, date_start,
        date_end, user_id, org_id, photographer_id, virtual_agency_id, orientation,
        state, country, country_iso). It is good practice to limit your page size
        when searching as callbacks for additional data can become expensive.'
      operationId: mediaGet
      parameters:
      - name: media_id
        in: query
        description: ID of the media
        required: false
        style: form
        explode: true
        schema:
          pattern: ^(VD|AD|I0|DO)000[a-zA-Z0-9._]{11}$
          type: string
        example: I0000EXAMPLEIMAG
      - name: photographer_id
        in: query
        description: ID of photographer
        required: false
        style: form
        explode: true
        schema:
          pattern: ^U0000[a-zA-Z0-9._]{11}$
          type: string
        example: U0000EXAMPLEUSER
      - name: virtual_agency_id
        in: query
        description: Virtual Agency ID
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: VA000____EXAMPLE
      - name: collections
        in: query
        description: Limit search to files within given collections. Comma separated
          list of collection ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: C0000EXAMPLECOLL, C0000EXAMPLECOL2
      - name: galleries
        in: query
        description: Limit search to files contained in given galleries. Comma separated
          list of gallery ids.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: G0000EXAMPLEGALL, G0000EXAMPLEGAL2
      - name: custom_metadata
        in: query
        description: Limit search to files containing custom metadata. Requires use
          of the org_id parameter. Parameter format is a JSON object containing field_id
          and option_id key-value pairs. e.g. {"Foo_field_123":"Foo_tag_abc","Bar_field_456":"Bar_tag_def"}.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: '{"Foo_field_123":"Foo_tag"}'
      - name: file_name
        in: query
        description: Name of the file
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: File name
      - name: terms
        in: query
        description: Search terms. Performs text search based on the terms across
          a variety of attributes such as file name, keywords, caption, etc.
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Example Search Terms
      - name: model_release
        in: query
        description: Media has a model release
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: property_release
        in: query
        description: Media has property release
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      - name: priced
        in: query
        description: Media is for sale
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: searchble
        in: query
        description: Media is publicly searchable
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      - name: print
        in: query
        description: Media is available for prints
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: personal_use
        in: query
        description: Media is available for personal use.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      - name: royalty_free
        in: query
        description: Media is available as royalty free.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: rights_managed
        in: query
        description: Media is available for license.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: false
      - name: media_type
        in: query
        description: Type of media (image | video | audio | doc) or a comma separated
          list
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: image,audio
      - name: city
        in: query
        description: City parameter
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample City
      - name: state
        in: query
        description: State/Province parameter
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample State
      - name: country
        in: query
        description: Country Parameter
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Country
      - name: country_iso
        in: query
        description: Country ISO code
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Code
      - name: rating
        in: query
        description: Ratings are from -1 to 254
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1
      - name: rating_min
        in: query
        description: Minimum rating
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1
      - name: rating_max
        in: query
        description: Maximum rating
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 10
      - name: date_start
        in: query
        description: Minimum date taken
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-04-09T18:34:40-04:00
      - name: date_end
        in: query
        description: Maximum date taken
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 2019-04-09T18:34:40-04:00
      - name: title
        in: query
        description: Title
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Title
      - name: edit_status
        in: query
        description: Edit status
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample status
      - name: urgency
        in: query
        description: Urgency
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Urgency
      - name: category
        in: query
        description: Category
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Category
      - name: keywords
        in: query
        description: Keywords
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Example Keywords
      - name: instructions
        in: query
        description: Instructions
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample instructions
      - name: author
        in: query
        description: Author
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Author
      - name: position
        in: query
        description: Author title/position
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Title/Position
      - name: location
        in: query
        description: Location
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample location
      - name: trans_ref
        in: query
        description: Job ID/transmission reference
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample ID
      - name: credit
        in: query
        description: Credit
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Credit
      - name: source
        in: query
        description: Source
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Source
      - name: copyright
        in: query
        description: Copyright
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Copyright
      - name: caption
        in: query
        description: Caption writer
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Caption writer
      - name: contact_info
        in: query
        description: Contact info. Query string based on key-value pairs. The available
          keys are - city, country, address, postal_code, region, email, phone, and
          url. For example, "?contract_info=city,NYC,country,USA is equivalent to
          city being NYC and country being USA.
        required: false
        style: form
        explode: false
        schema:
          type: string
        example: city,NYC,country,USA
      - name: genre
        in: query
        description: Genre
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample genre
      - name: rights
        in: query
        description: Usage rights
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample usage rights
      - name: scene
        in: query
        description: Scene
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample scene
      - name: subject_code
        in: query
        description: Subject Code
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Subject Code
      - name: caption_writer
        in: query
        description: Caption Writer
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Writer
      - name: orientation
        in: query
        description: Orientation
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - horizontal
          - vertical
          - panoramic
          - square
        example: horizontal
      - name: web_statement
        in: query
        description: Web statement
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: Sample Web Statement
      - name: is_empty
        in: query
        description: Denotes which parameters must be empty. Comma-separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/MediaSearchEmpty'
        example: title, edit_status,urgency
      - name: not_empty
        in: query
        description: Denotes which parameters must have a value. Comma separated list.
        required: false
        style: form
        explode: false
        schema:
          $ref: '#/components/schemas/MediaSearchEmpty'
        example: title,edit_status,urgency
      - name: match_all_terms
        in: query
        description: Match all terms. Return all keywords specified in the terms parameter.
          Default to true.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: per_page
        in: query
        description: Results per page.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 50
      - name: page
        in: query
        description: Page number.
        required: false
        style: form
        explode: true
        schema:
          type: integer
        example: 1
      - name: sort_by
        in: query
        description: Field to sort by.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - relevance
          - date
          - file_name
          - upload_time
        example: relevance
      - name: sort_dir
        in: query
        description: Direction to sort by.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
        example: asc
      responses:
        200:
          description: |
            /media - HTTP 200 OK Response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_6'
        403:
          description: 403 Forbidden Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error:
                  id: ApiKeyInvalidException
                  status: "403"
                  title: Missing or invalid API key
                  detail: |-
                    Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                    is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                    If you do not have an API key, you can request one on our website.
        429:
          description: 429 Too Many Requests Error
          headers:
            Retry-After:
              description: The Retry-After response HTTP header, expressed in seconds,
                indicates how long the user agent should wait before making a follow-up
                request.
              style: simple
              explode: false
              schema:
                type: integer
              example: 180
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                errors:
                  id: TooManyRequestsException
                  status: "429"
                  title: Too Many Requests
                  detail: The user has sent too many requests in a given amount of
                    time see "rate limiting".
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    GalleryId:
      maxLength: 16
      minLength: 16
      pattern: ^G0000[a-zA-Z0-9._]{11}$
      type: string
      description: The Gallery ID
      example: G0000EXAMPLEGALL
    Gallery:
      required:
      - attributes
      - id
      - type
      type: object
      properties:
        id:
          pattern: ^G0000[a-zA-Z0-9._]{11}$
          type: string
          description: Gallery ID
          example: G0000EXAMPLE_GAL
          xml:
            attribute: true
        type:
          pattern: gallery
          type: string
          example: gallery
        attributes:
          $ref: '#/components/schemas/Gallery_attributes'
        links:
          $ref: '#/components/schemas/Gallery_links'
    MetaTag:
      type: object
      properties:
        copyright:
          type: string
          example: PhotoShelter 2019
        version:
          type: string
          example: 2019-05-01
        rate_limit:
          $ref: '#/components/schemas/MetaTag_rate_limit'
    Error:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error_errors'
      description: This object generates errors in compliance with RFC 7807 API Problem
    CollectionId:
      maxLength: 16
      minLength: 16
      pattern: ^C0000[a-zA-Z0-9._]{11}$
      type: string
      description: The Collection ID
      example: C0000EXAMPLECOLL
    Collection:
      required:
      - attributes
      - id
      - type
      type: object
      properties:
        id:
          pattern: ^C0000[a-zA-Z0-9._]{11}$
          type: string
          description: Collection Id
          example: C0000EXAMPLECOLL
        type:
          type: string
          description: Type
        attributes:
          $ref: '#/components/schemas/Collection_attributes'
    PaginationMetaTag:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        first:
          type: string
          example: example.photoshelter.com/psapi/v4.0/endpoint?api_key=EXAMPLE_KEY&page=1
        last:
          type: string
          example: example.photoshelter.com/psapi/v4.0/endpoint?api_key=EXAMPLE_KEY&page=5
        next:
          type: string
          example: example.photoshelter.com/psapi/v4.0/endpoint?api_key=EXAMPLE_KEY&page=2
        prev:
          type: string
          example: example.photoshelter.com/psapi/v4.0/endpoint?api_key=EXAMPLE_KEY&page=1
    MediaSearchEmpty:
      type: array
      items:
        type: string
        enum:
        - title
        - edit_status
        - urgency
        - category
        - keywords
        - instructions
        - author
        - position
        - location
        - city
        - state
        - country
        - headline
        - trans_ref
        - credit
        - source
        - copyright
        - caption
        - caption_writer
        - ci_city
        - ci_country
        - ci_address
        - ci_postal_code
        - ci_region
        - ci_email
        - ci_phone
        - ci_url
        - genre
        - rights
        - scene
        - subject_code
        - web_statement
    Media:
      required:
      - attributes
      - id
      - type
      type: object
      properties:
        id:
          pattern: ^(AD|VD|DO|I0)000[a-zA-Z0-9._]{11}$
          type: string
          example: I0000zCtew4UPbBw
        type:
          type: string
          example: media
          enum:
          - media
        attributes:
          $ref: '#/components/schemas/Media_attributes'
    inline_response_200:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Gallery'
        meta:
          $ref: '#/components/schemas/MetaTag'
    inline_response_200_1:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/MetaTag'
      example: '{"data":{"type":"collection","id":"C0000EXAMPLECOLL","attributes":{"name":"Example
        Name","description":"Example Description","display_order":1,"access_id":"A0000EXAMPLE_ACS","is_listed":true,"created_at":"2019-04-09T18:34:40-04:00","modified_at":"2019-04-09T18:34:40-04:00"},"links":{"self":"example.photoshelter.com/collections/C0000EXAMPLECOLL"}},"meta":{"copyright":"PhotoShelter
        2019","version":"2019-05-01","rate_limit":{"limit":10,"current":1,"expires":40}}}'
    inline_response_200_2:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/MetaTag'
    inline_response_200_3:
      required:
      - data
      type: object
      properties:
        data:
          type: object
        meta:
          $ref: '#/components/schemas/MetaTag'
      example: '{"data":{"custom_url":"https://example.photoshelter.com/gallery-collection/name/C0000EXAMPLECOLL"},"meta":{"copyright":"PhotoShelter
        2019","version":"2019-05-01","rate_limit":{"limit":10,"current":1,"expires":40}}}'
    inline_response_200_4:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/PaginationMetaTag'
    inline_response_200_5:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        meta:
          $ref: '#/components/schemas/MetaTag'
    inline_response_200_6:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Media'
        meta:
          $ref: '#/components/schemas/PaginationMetaTag'
    Gallery_attributes:
      required:
      - access_id
      - created_at
      - description
      - display_order
      - is_listed
      - is_orig_enabled
      - is_watermark_disabled
      - key_image_id
      - modified_at
      - name
      - name_url
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: Name of Gallery or Collection object (Whichever it is)
          example: My trip to DR
        name_url:
          maxLength: 100
          type: string
          description: URL to the gallery
          nullable: true
        description:
          maxLength: 100
          type: string
          description: Description of the Gallery
          nullable: true
          example: Trip to DR with my brothers and sisters
        display_order:
          type: integer
          description: Custom display order
          example: 1
        key_image_id:
          pattern: ^GI000[a-zA-Z0-9._]{11}$
          type: string
          description: ID of the Image that is the key image
          nullable: true
          example: GI000EXAMPLE_IMG
        access_id:
          pattern: ^A0000[a-zA-Z0-9._]{11}$
          type: string
          description: Access ID of the Gallery
          example: A0000EXAMPLE_ACS
        is_listed:
          type: boolean
          description: Flag that denotes if it is listed on the public site
          example: false
        is_orig_enabled:
          type: boolean
          description: Original enabled boolean value
          example: true
        is_watermark_disabled:
          type: boolean
          description: Watermark disabled boolean value
          example: true
        created_at:
          type: string
          description: Creation date
          example: 2019-04-25T14:54:12.136828
        modified_at:
          type: string
          description: Last modified date
          example: 2019-04-25T14:54:12.136828
    Gallery_links:
      type: object
      properties:
        self:
          type: string
          description: Link to itself
          example: https://api.photoshelter.com/psapi/v4/galleries/G0000ZJCk9LW4Zfc
    MetaTag_rate_limit:
      type: object
      properties:
        limit:
          type: integer
          example: 10
        current:
          type: integer
          example: 1
        expires:
          type: integer
          example: 40
    Error_links:
      type: object
      properties:
        about:
          type: string
          example: http://api.developer.com/404.html
    Error_errors:
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this occurrence of the problem
        links:
          $ref: '#/components/schemas/Error_links'
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: string
          description: The HTTP status code set by the origin server for this occurrence
            of the problem.
        detail:
          type: string
          description: An human readable explanation specific to this occurrence of
            the problem.
    Collection_attributes:
      required:
      - access_id
      - created_at
      - description
      - display_order
      - is_listed
      - key_image_id
      - modified_at
      - name
      - name_url
      type: object
      properties:
        name:
          maxLength: 100
          type: string
          description: Name of the collection
          example: My Trip to DR
        name_url:
          maxLength: 100
          type: string
          description: URL to the gallery
          nullable: true
        description:
          type: string
          description: Description of the colletion
          example: My Trip to DR Collection
        display_order:
          type: integer
          description: Display order
          example: 1
        key_image_id:
          pattern: ^GI000[a-zA-Z0-9._]{11}$
          type: string
          description: Key Image ID
          example: GI000EXAMPLE_IMG
        access_id:
          pattern: ^A0000[a-zA-Z0-9._]{11}$
          type: string
          description: Access ID
          example: A0000EXAMPLE_ACS
        is_listed:
          type: boolean
          description: Is listed on public site
          example: false
        created_at:
          type: string
          description: Creation date
          example: 2019-04-25T14:54:12.136828
        modified_at:
          type: string
          description: Modified Date
          example: 2019-04-25T14:54:12.136828
    Media_attributes:
      required:
      - file_name
      - type
      type: object
      properties:
        file_name:
          type: string
          example: Sample File Name
        type:
          type: string
          enum:
          - image
          - audio
          - video
          - doc
