<?php
/**
 * GalleryAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  PhotoShelter\Dev
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PhotoShelter API v4
 *
 * # PhotoShelter API v4 definition
 *
 * OpenAPI spec version: Anthony
 * Contact: api-support@photoshelter.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PhotoShelter\Dev\psPackage;

use \ArrayAccess;
use \PhotoShelter\Dev\ObjectSerializer;

/**
 * GalleryAttributes Class Doc Comment
 *
 * @category Class
 * @package  PhotoShelter\Dev
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GalleryAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Gallery_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'name_url' => 'string',
'description' => 'string',
'display_order' => 'int',
'key_image_id' => 'string',
'access_id' => 'string',
'is_listed' => 'bool',
'is_orig_enabled' => 'bool',
'is_watermark_disabled' => 'bool',
'created_at' => 'string',
'modified_at' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'name_url' => null,
'description' => null,
'display_order' => null,
'key_image_id' => null,
'access_id' => null,
'is_listed' => null,
'is_orig_enabled' => null,
'is_watermark_disabled' => null,
'created_at' => null,
'modified_at' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'name_url' => 'name_url',
'description' => 'description',
'display_order' => 'display_order',
'key_image_id' => 'key_image_id',
'access_id' => 'access_id',
'is_listed' => 'is_listed',
'is_orig_enabled' => 'is_orig_enabled',
'is_watermark_disabled' => 'is_watermark_disabled',
'created_at' => 'created_at',
'modified_at' => 'modified_at'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'name_url' => 'setNameUrl',
'description' => 'setDescription',
'display_order' => 'setDisplayOrder',
'key_image_id' => 'setKeyImageId',
'access_id' => 'setAccessId',
'is_listed' => 'setIsListed',
'is_orig_enabled' => 'setIsOrigEnabled',
'is_watermark_disabled' => 'setIsWatermarkDisabled',
'created_at' => 'setCreatedAt',
'modified_at' => 'setModifiedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'name_url' => 'getNameUrl',
'description' => 'getDescription',
'display_order' => 'getDisplayOrder',
'key_image_id' => 'getKeyImageId',
'access_id' => 'getAccessId',
'is_listed' => 'getIsListed',
'is_orig_enabled' => 'getIsOrigEnabled',
'is_watermark_disabled' => 'getIsWatermarkDisabled',
'created_at' => 'getCreatedAt',
'modified_at' => 'getModifiedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_url'] = isset($data['name_url']) ? $data['name_url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_order'] = isset($data['display_order']) ? $data['display_order'] : null;
        $this->container['key_image_id'] = isset($data['key_image_id']) ? $data['key_image_id'] : null;
        $this->container['access_id'] = isset($data['access_id']) ? $data['access_id'] : null;
        $this->container['is_listed'] = isset($data['is_listed']) ? $data['is_listed'] : null;
        $this->container['is_orig_enabled'] = isset($data['is_orig_enabled']) ? $data['is_orig_enabled'] : null;
        $this->container['is_watermark_disabled'] = isset($data['is_watermark_disabled']) ? $data['is_watermark_disabled'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['name_url'] === null) {
            $invalidProperties[] = "'name_url' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['display_order'] === null) {
            $invalidProperties[] = "'display_order' can't be null";
        }
        if ($this->container['key_image_id'] === null) {
            $invalidProperties[] = "'key_image_id' can't be null";
        }
        if ($this->container['access_id'] === null) {
            $invalidProperties[] = "'access_id' can't be null";
        }
        if ($this->container['is_listed'] === null) {
            $invalidProperties[] = "'is_listed' can't be null";
        }
        if ($this->container['is_orig_enabled'] === null) {
            $invalidProperties[] = "'is_orig_enabled' can't be null";
        }
        if ($this->container['is_watermark_disabled'] === null) {
            $invalidProperties[] = "'is_watermark_disabled' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['modified_at'] === null) {
            $invalidProperties[] = "'modified_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of Gallery or Collection object (Whichever it is)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_url
     *
     * @return string
     */
    public function getNameUrl()
    {
        return $this->container['name_url'];
    }

    /**
     * Sets name_url
     *
     * @param string $name_url URL to the gallery
     *
     * @return $this
     */
    public function setNameUrl($name_url)
    {
        $this->container['name_url'] = $name_url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the Gallery
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int $display_order Custom display order
     *
     * @return $this
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets key_image_id
     *
     * @return string
     */
    public function getKeyImageId()
    {
        return $this->container['key_image_id'];
    }

    /**
     * Sets key_image_id
     *
     * @param string $key_image_id ID of the Image that is the key image
     *
     * @return $this
     */
    public function setKeyImageId($key_image_id)
    {
        $this->container['key_image_id'] = $key_image_id;

        return $this;
    }

    /**
     * Gets access_id
     *
     * @return string
     */
    public function getAccessId()
    {
        return $this->container['access_id'];
    }

    /**
     * Sets access_id
     *
     * @param string $access_id Access ID of the Gallery
     *
     * @return $this
     */
    public function setAccessId($access_id)
    {
        $this->container['access_id'] = $access_id;

        return $this;
    }

    /**
     * Gets is_listed
     *
     * @return bool
     */
    public function getIsListed()
    {
        return $this->container['is_listed'];
    }

    /**
     * Sets is_listed
     *
     * @param bool $is_listed Flag that denotes if it is listed on the public site
     *
     * @return $this
     */
    public function setIsListed($is_listed)
    {
        $this->container['is_listed'] = $is_listed;

        return $this;
    }

    /**
     * Gets is_orig_enabled
     *
     * @return bool
     */
    public function getIsOrigEnabled()
    {
        return $this->container['is_orig_enabled'];
    }

    /**
     * Sets is_orig_enabled
     *
     * @param bool $is_orig_enabled Original enabled boolean value
     *
     * @return $this
     */
    public function setIsOrigEnabled($is_orig_enabled)
    {
        $this->container['is_orig_enabled'] = $is_orig_enabled;

        return $this;
    }

    /**
     * Gets is_watermark_disabled
     *
     * @return bool
     */
    public function getIsWatermarkDisabled()
    {
        return $this->container['is_watermark_disabled'];
    }

    /**
     * Sets is_watermark_disabled
     *
     * @param bool $is_watermark_disabled Watermark disabled boolean value
     *
     * @return $this
     */
    public function setIsWatermarkDisabled($is_watermark_disabled)
    {
        $this->container['is_watermark_disabled'] = $is_watermark_disabled;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string $modified_at Last modified date
     *
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
