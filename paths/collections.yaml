get:
  tags:
  - Collection
  summary: GET /collections.
  description: Search the collections. This endpoint requires the user to be authenticated.
    It will return a list of collections owned by the user. For pagination to
    work, both per_page and page query parameters must be set.
  operationId: collectionsGet
  parameters:
  - name: id
    in: query
    description: Collection ID to match in the query
    required: false
    style: form
    explode: true
    schema:
      $ref: ../components/schemas.yaml#/CollectionId
    example: C0000EXAMPLECOLL
  - name: name
    in: query
    description: Collection name to match in the query. Having this parameter
      set will always default to an exact name matching unless specified otherwise
      by the usage of the match parameter
    required: false
    style: form
    explode: true
    schema:
      maxLength: 100
      type: string
    example: EXAMPLE NAME
  - name: parent
    in: query
    description: Limit collections to children of the provided collection ID.
      Pass blank to find collections with no parent.
    required: false
    style: form
    explode: true
    schema:
      $ref: '#/components/schemas/CollectionId'
    example: C0000EXAMPLECOLL
  - name: match
    in: query
    description: Flag that denotes whether to perform a partial name match. This
      parameter will only work if the name query parameter has been set and the
      only value available for this parameter is false. Setting this parameter
      to false will perform case insensitive partial name matching.
    required: false
    style: form
    explode: true
    schema:
      type: boolean
      default: false
      enum:
      - false
    example: false
  - name: sort_by
    in: query
    description: Sort by an attribute. The available attributes to sort by is
      creation_time, modification_time, name, and display_order. The default behavior
      is to sort the collections by the attribute in ascending order. This can
      be changed with the usage of the 'sort_direction' query parameter.
    required: false
    style: form
    explode: true
    schema:
      type: string
      enum:
      - creation_time
      - modification_time
      - name
      - display_order
    example: name
  - name: sort_direction
    in: query
    description: Sort direction. This parameter requires the usage of the 'sort_by'
      query parameter. Setting this parameter to one of the allowed values will
      set the direction of the sort.
    required: false
    style: form
    explode: true
    schema:
      type: string
      enum:
      - ascending
      - descending
    example: ascending
  - name: per_page
    in: query
    description: Results per page
    required: false
    style: form
    explode: true
    schema:
      type: integer
      default: 50
    example: 50
  - name: page
    in: query
    description: Page number
    required: false
    style: form
    explode: true
    schema:
      type: integer
    example: 1
  responses:
    200:
      description: |
        /collections - HTTP 200 OK Response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
        application/xml:
          schema:
            $ref: '#/components/schemas/inline_response_200_1'
    400:
      description: 400 Bad Request Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              id: ThisShouldBeARealId
              status: "400"
              title: Bad Request / Syntax
              detail: Bad Request
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
    403:
      description: 403 Forbidden Client Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              id: ApiKeyInvalidException
              status: "403"
              title: Missing or invalid API key
              detail: |-
                Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                If you do not have an API key, you can request one on our website.
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              id: ApiKeyInvalidException
              status: "403"
              title: Missing or invalid API key
              detail: |-
                Missing or invalid API Key error. This occurs when an API key is either missing from the request to the server or
                is invalid. This error can be resolved by including the API key in the request URL with the api_key parameter or in the HTTP request headers.
                If you do not have an API key, you can request one on our website.
    429:
      description: 429 Too Many Requests Error
      headers:
        Retry-After:
          description: The Retry-After response HTTP header, expressed in seconds,
            indicates how long the user agent should wait before making a follow-up
            request.
          style: simple
          explode: false
          schema:
            type: integer
          example: 180
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              id: TooManyRequestsException
              status: "429"
              title: Too Many Requests
              detail: The user has sent too many requests in a given amount of
                time see "rate limiting".
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'